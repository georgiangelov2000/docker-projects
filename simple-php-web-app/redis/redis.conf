# Redis configuration file

# The port your Redis server will listen on. Default is 6379.
port 6379

# The IP address on which the server should listen. Default is 127.0.0.1.
bind 127.0.0.1

# Enable protected mode. In protected mode, Redis only accepts connections from localhost by default.
# If you're running Redis on a server that's exposed to the internet, make sure to bind to an appropriate IP address
# and set 'protected-mode' to 'no'. Otherwise, leave it as 'yes' for enhanced security.
protected-mode yes

# The directory where Redis data will be stored.
dir /data

# Specify the maximum memory Redis can use. When the limit is reached, Redis will start to evict keys using the configured eviction policy.
# Uncomment the following line to set a memory limit. You can specify the limit in bytes or using human-readable units like '1GB'.
# maxmemory 1GB

# Set the eviction policy for when Redis reaches its memory limit.
# Available options are 'noeviction', 'allkeys-lru', 'volatile-lru', 'allkeys-random', 'volatile-random', 'volatile-ttl'.
# Uncomment the following line to set the eviction policy.
# eviction-policy volatile-lru

# Log level. Valid options are 'debug', 'verbose', 'notice', and 'warning'.
loglevel notice

# Specify the logfile. If not set, output will be sent to the standard output (usually the console).
#logfile /var/log/redis/redis-server.log

# Enable persistence by saving the dataset to disk. The dataset will be written to disk asynchronously.
# Comment out the following line if you don't want to enable persistence.
# save 900 1
# save 300 10
# save 60 10000

# Disable saving data to disk altogether.
# save ""

# Set the number of databases. By default, Redis has 16 separate databases indexed from 0 to 15.
databases 16

# Set the maximum number of clients that can be connected at the same time.
# Default is 10000.
maxclients 10000

# Set the TCP backlog. Default is 511.
tcp-backlog 511

# Set the timeout for client connections. Default is 0 (unlimited).
timeout 0

# Set the maximum memory usage for keys with an expiration (TTL). By default, Redis will not try to remove keys with an expiration set.
# Uncomment the following line to enable this feature.
# maxmemory-policy volatile-ttl

# Specify the maximum number of simultaneous clients allowed from the same IP address. Default is unlimited.
# maxclients-per-ip 1024

# Enable AOF (Append Only File) persistence. AOF logs every write operation received by the server, making it possible to rebuild the dataset.
# AOF is slower compared to RDB (Redis Database Backup) but provides better durability.
appendonly yes

# Specify the filename for the AOF file. If not set, Redis will use a file named "appendonly.aof" in the current directory.
appendfilename "appendonly.aof"

# Specify the AOF synchronization mode. Available options are 'always', 'everysec', and 'no'. 'everysec' is a good balance between performance and durability.
# Uncomment the following line to set the synchronization mode.
# appendfsync everysec

# Enable Redis replication. This feature allows Redis to act as a master-slave replication setup, where data is asynchronously replicated to one or more slave nodes.
# replication enable

# Specify the IP address and port of the master server for replication.
# masterauth <master-password>
# slaveof <master-ip> <master-port>

# Require clients to authenticate. Uncomment the following line and replace 'your-password' with your preferred password.
requirepass 1234567890

# Set the maximum number of simultaneous connections allowed from the same client. Default is 10000.
# maxconns 10000

# Set the client query buffer size. Default is 1MB.
# client-output-buffer-limit normal 0 0 0
# client-output-buffer-limit slave 256mb 64mb 60
# client-output-buffer-limit pubsub 32mb 8mb 60

# Enable SSL/TLS support. Uncomment the following lines and provide the necessary certificate and key files.
# tls-port 6379
# tls-cert-file /path/to/cert.pem
# tls-key-file /path/to/key.pem

# Require SSL/TLS connections. Uncomment the following line to enforce SSL/TLS connections.
# tls-auth-clients yes
